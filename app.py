# app.py

import gradio as gr
from agents.planner_agent import plan_task
from agents.solver_agent import solve_task, get_last_generated_code
from agents.explainer_agent import explain_solution


# --- Tab 1: MILP Solver Pipeline ---
def milp_solver_ui():
    with gr.Blocks() as demo:
        gr.Markdown("# ðŸ§  Agentic MILP Solver")
        gr.Markdown("Enter your MILP optimization problem. Agents will plan, solve, and explain.")

        with gr.Row():
            user_input = gr.Textbox(label="ðŸ“¥ MILP Problem", lines=8, placeholder="e.g.\nMaximize: 3x + 5y\nSubject to: 4x + 3y <= 240...")

        run_btn = gr.Button("ðŸš€ Run Agents")

        with gr.Accordion("ðŸ§© Planner Output", open=False):
            planner_output = gr.Textbox(label="MILP Plan", lines=6)

        with gr.Accordion("ðŸ›  Solver Output", open=False):
            solver_output = gr.Textbox(label="MILP Solution", lines=6)

        with gr.Accordion("ðŸ“– Explanation", open=False):
            explanation_output = gr.Textbox(label="Solution Explanation", lines=6)

        def run_pipeline(problem_text):
            plan = plan_task(problem_text)
            solution = solve_task(plan)
            explanation = explain_solution(solution, plan)
            return plan, solution, explanation

        run_btn.click(fn=run_pipeline, inputs=[user_input], outputs=[planner_output, solver_output, explanation_output])
    return demo


# --- Tab 2: View Code ---
def code_view_ui():
    with gr.Blocks() as code_tab:
        gr.Markdown("# ðŸ§¾ View Generated Code")
        gr.Markdown("This is the raw Python (PuLP) code generated by the Solver Agent.")

        code_output = gr.Code(label="Python Code", language="python")
        refresh_btn = gr.Button("ðŸ”„ Refresh Code")

        refresh_btn.click(fn=get_last_generated_code, outputs=code_output)
    return code_tab


# --- Tab 3: About ---
def about_tab_ui():
    with gr.Blocks() as about:
        gr.Markdown("# ðŸ“„ About This App")
        gr.Markdown("""
        This is an AI-powered MILP solver assistant using agent-based architecture.
        
        - Planner Agent: Converts natural language to MILP formulation
        - Solver Agent: Uses Gemini + PuLP to generate & run code
        - Explainer Agent: Explains results simply
        - Powered by Google Gemini + Gradio
        
        ðŸ’¡ Example:
        ```
        Maximize profit: 3x + 5y  
        Subject to:  
        4x + 3y <= 240  
        2x + 5y <= 100  
        x, y >= 0 and integer
        ```
        """)
    return about


# Combine all into tabbed interface
demo = gr.TabbedInterface(
    interface_list=[
        milp_solver_ui(),
        code_view_ui(),
        about_tab_ui()
    ],
    tab_names=["ðŸ”¢ Solve MILP", "ðŸ§¾ View Code", "ðŸ“„ About"]
)

if __name__ == "__main__":
    demo.launch(share=True)
